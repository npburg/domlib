#labels Phase-Requirements,Phase-Design,Featured
= Domlib Design Doc =
== Classes ==
  * *AI*: The AI class is the base class for any AI that is written by an AI developer. The default implementation will be provided in the DeafultAI so AI developers can extend this class if they do not want to override every interface.
  * *ICard* - The ICard class provides the public interface to the AI to gain public information about the card such as the cost, plus action, etc, (note, some information may vary based on the context of the player for example PhilosopherStoneCard’s cost is determined by the size of the draw pile and discard pile.)
  * *Card* – The Card class is derived from the ICard class to provide the AI information through that interface and the Card class serves as the base class for each specific card class in the game. (i.e. MoatCard, GoldCard, EstateCard, etc.) The Card class provides the basic implementation for the ICard class interfaces as well as the basic implementation for the phase it supports. The cards that derive from this class are expect to implement the phase functions to implement the behavior per phase if it is different than the default implementation..
  * *CardFactory* – The Card class uses to Singleton pattern to prevent the creation of more than one card instance to be instantiated. The CardFactory manages the creation and distribution of the different cards for the Card class. It is a nested class of the Card class and a static member so it is always available and when the program exits, the CardFactory will clean up the Cards it generated.
  * *IEngine* – The IEngine class provides the interface for the AI to request information about the state of the game.
  * *Engine* – The engine manages the list of players, contains the main loop for playing the game and holds the SupplyPileManager and any global state such as the TradeRouteMat or the TrashPile.
  * *IGame* – The IGame class provides the public interface for the Game class.
  * *Game* – The game class contains the engine and provides the link from the application to the engine for setting up the game and registering the AIs. The reason this is separated from the Engine itself is because each AI is provide a reference to the IEngine to get the current state of the game engine to make decisions. The Engine also needs to provide a register AI function to the application; however, if this was part of the IEngine interface then an AI, while in the middle of the game, could register another AI or request the supply piles to be randomized again or any other changes to the game. The IGame/Game class provide the interface for the app to setup the game, while IEngine/Engine provide the current state of the game to the AI while the game is being played.
  * *IPlayer* – The IPlayer class provides the basic interface for the AI to gain public information about a Player. This does not provide any private information about the Player the AI is registered with.
  * *IPlayerSelf* – The IPlayerSelf class provides the basic interface for the AI to gain public and private information about a Player. This still does not provide information a player is not allowed to know about itself such as the contents of the draw pile.
  * *Player* – The Player class manages all the lists, piles, mats and turn state that represent a player in the game.
  * *ITreasure* – The ITreasure class provides the AI access to the Treasure classes external interface. The Treasure class is not provided externally since that would enable an AI to rewrite the Treasure class to modify it’s behavior.
  * *Treasure* – The Treasure class represent the complex value of currency in the game (coins and potions). This class provides overrided operators such as (+, -, ==, <, etc.). 
  * *SupplyPile* – The SupplyPile class manages the number of supply cards in a pile, the number of embargo tokens and trade route tokens and any other state of an individual pile.
  * *SupplyPileManager* – The SupplyPileManager class manages all the supply piles in the game and some basic functionality the Engine such as helping determine the victory condition or setting up the piles used in the game.
==Turn Phases==
  * *Start of turn* – The turn is initialized with setting the number of actions, buys and treasure to start with and clears turn lists (except Duration List, any others???) The AI is notified of the start of the player’s turn to save any state that is cleared at the start of the turn.
  * *Duration Phase* – All the Duration card in the duration list are processed for their duration effects. The cards in this list where places here during the previous turn’s Cleanup phase.
  * *Action Phase* – The AI is requested to play Action cards from Hand one at a time until there are no more actions left this turn or no more Action cards in Hand or the AI returns the NullCard to indicate it does not wish to play any more action cards. Cards which the AI requests to play are checked against the cards in Hand, then placed into the In-Play list, the number of actions for the player’s turn is decremented and the number of actions cards played for the player’s turn is incremented and then the card is played by the Player.
  * *Treasure Phase* – The AI is requested to play Treasure cards from Hand one at a time until they have not more Treasure cards in Hand or the AI returns the NullCard to indicate it does not wish to play any more actions cards. This phase is needed for the new Prosperity Treasure cards since the order the cards are played matter due to the effects of the Treasure cards. As the cards are played, they also return the value of the treasure card at the state in the game at the time the individual treasure card is played to sum up the buying power for the BuyPhase.
  * *Buy Phase* – The AI is requested to buy a card from supply for which they have purchasing power until the player has no more “buys” or no more purchasing power or the AI return the NullCard indicating it does not wish to purchase another card.
  * *Cleanup Phase* – The cards in the InPlayList are processed to preform any special Cleanup phase actions, then the DurationList is cleared and any Duration cards in the InPlayList are put into the DurationList and the remaining cards in the InPlayList and Hand are discarded. Finally the player draws 5 cards (or draws 3 cards if Output is in play.)